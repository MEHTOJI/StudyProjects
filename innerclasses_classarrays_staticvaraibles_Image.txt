//В этой программе мы будем использовать 
// 1. inner классы (внутренние) и Объемлющие классы (внешние для inner) 
// 2. создадим массив, состоящий из элементов собственного класса
// 3. Воспользуемся статическими переменными класса

/*inner классы. В этой программе мы создадим объемлющий класс Image,
в котором будет лежать внутренний класс Pixel.

Оба этих класса имеют собственные поля данных и методы
*/


/* Массив, состоящий из элементов собственного класса :
Необходимо следить за правильностью ввода данных для каждого элемента массива
(необходим будет конструктор по умолчанию). При надичии этого конструктора
далее создается массив с стандартным синтаксисом для создания массивов
(динамических или статических - не важно)
*/

/*Статические переменные должны находится в private поле класса, особенно
если они участвуют в критически важных методах класса.

Синтаксис:

static <тип переменной> <имя переменной>;

Начальное значение для такой статической переменной задается вне класса следующим образом:

<тип статической переменной> <имя класса>::<имя статической переменной> = <нужное значение>

*/



#include <iostream>
#include <fstream>
#include <string>
using namespace std;

class Image // Внешний класс Image
{
public:
	class Pixel { // Создание внутреннего (inner) класса Pixel
	public:
		Pixel() { // Конструктор по умолчанию
			this->id = 0;
			this->r = 0;
			this->g = 0;
			this->b = 0;
		}

		Pixel(int id, int r, int g, int b) { // Конструктор при вводе данных
			this->id = id;
			this->r = r;
			this->g = g;
			this->b = b;
		}
		string get_pixel_info() { // Функция по выводу информации об объекте класса Pixel 
			return  "Object id: " + to_string(id) + " r = " + to_string(r) + " g = " + to_string(g) + " b = " + to_string(b);
		}

	private:
		int id, r, g, b;
	};

	Image() { // Конструктор класса Image
		cout << "Input size: " << endl;
		cin >> size;
		this->size = size;
		cout << "---------------" << endl;
		this->arr = new Pixel[this->size];       // Создание динамического массива arr, состоящего из объектов класса Pixel
		for (int i = 0; i < this->size; i++) {
			int r, g, b;
			cin >> r >> g >> b;
			arr[i] = Pixel(id, r, g, b);         // Вызов конструктора Pixel  для заполнения каждого отдельного элемента массива arr
			id++;
			cout << "---------------" << endl;
		}
	}
	void get_Image_pixeles_info() {
		for (int i = 0; i < this->size; i++) {
			cout << arr[i].get_pixel_info() << endl;
		}
	}

	~Image() {
		delete[] this->arr;                      //Удаление выделенного динамического массива, состоящего из объектов класса Pixel
	}


private:
	static int id;                              //Использование статической переменной id (обязательно задаем начальное значение для нее вне класса)
	int size;
	Pixel* arr;
};

int Image::id = 0;                              // Задаем начальное значение переменной id вне класса Image

int main() {
	Image a;
	a.get_Image_pixeles_info();
	return 0;
}


